/* CoffeeShop API, version 0.1 */

/* CoffeeShop constructor */
function CoffeeShop(url) {
  /* Private
    Instance, and URL to store (server-side) */
  var instance = this;
  var url = url;

  /* Privileged
    Retrieve the browser-specific XMLHttpRequest object */
  this.getXHR = function() {
    if (typeof XMLHttpRequest == "undefined") {
      XMLHttpRequest = function() {
        try { return new ActiveXObject("Msxml2.XMLHTTP.6.0") }
        catch (e) {}
        try { return new ActiveXObject("Msxml2.XMLHTTP.3.0") }
        catch (e) {}
        try { return new ActiveXObject("Msxml2.XMLHTTP") }
        catch (e) {}
        return false;
      }
    }
    
    return new XMLHttpRequest();
  };
  
  /* Privileged
    Get JSON-P data from URL via AJAX */
  this.getJSON = function(path, callback) {
    var request = instance.getXHR();
    var script = document.createElement("script");
    
    script.src = instance.url + path;
    script.type = "text/javascript";
    
    if (callback != undefined) {
      script.src += "?callback=CoffeeShop._callback"

      instance._callback = function(data) {
        callback(data);
        instance._callback = undefined
      };
    }
    
    if (document.getElementsByTagName("head").length > 0) {
      document.getElementsByTagName("head")[0].appendChild(script);
    }
  }
}

/* Public
  Retrieve single object containing product data */
CoffeeShop.prototype.getProduct = function(id) {
  var product;

  this.getJSON("/product/" + id, function(data) {
    if (data.length > 0) product = data[0];
  }

  return product;
}

/* Public
  Retrieve array containing all products as objects */
CoffeeShop.prototype.getProducts = function() {
  var products;

  this.getJSON("/product/" + id, function(data) {
    products = data;
  }

  return products;
}
